/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-06-13 08:49:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import example.Festival;
import java.util.ArrayList;
import example.Festival_DBManager;

public final class SelectedDay_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("example.Festival_DBManager");
    _jspx_imports_classes.add("example.Festival");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

Festival_DBManager fsdb=new Festival_DBManager();

String sday = request.getParameter("day");
String smonth = request.getParameter("month");
String syear = request.getParameter("year");

String selected_date = syear;

if(Integer.parseInt(smonth)<10)
{
	smonth="-0"+smonth;	
}
else
	smonth="-"+smonth;

if(Integer.parseInt(sday)<10)
{
	sday="-0"+sday;
}
else
	sday="-"+sday;

selected_date+=smonth+sday;
ArrayList<Festival> list = fsdb.SelectFestivalByDate(selected_date);   


      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"utf-8\">\n");
      out.write("<title>축제 목록</title>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("\t\tvar parent=null;\n");
      out.write("\t\tvar fst_name=null;\n");
      out.write("\t\tvar fst_x=null;\n");
      out.write("\t\tvar fst_y=null;\n");
      out.write("\t\tvar im=null;\n");
      out.write("// \t\t테스트용 지금 안씀\n");
      out.write("        function onLoad(){   \n");
      out.write("        parent = window.opener;\n");
      out.write("//         alert(window.name)\n");
      out.write("\t\talert(window.closed)\n");
      out.write("\t\tparent.popupClose();\n");
      out.write("// \t\topener.close();\n");
      out.write("        window.top;\n");
      out.write("        }\n");
      out.write("        function fesClick(fst_name){\n");
      out.write("        \twindow.close();\n");
      out.write("        \tvar name=fst_name;\n");
      out.write("//         \tconsole.log(fst_name)\n");
      out.write("        \topener.location.href=\"festival.jsp?fes_name=\"+fst_name;\n");
      out.write("//         \topener.location.href=\"map_category.jsp?x=\"+fst_x+\"&y=\"+fst_y+\"&im=\"+im+\"&fesName=\"+fst_name\n");
      out.write("        }\n");
      out.write("        function unLoad(){\n");
      out.write("        \twindow.close();\n");
      out.write("        }\n");
      out.write("</script>\n");
      out.write("\t\t<!-- all css here -->\n");
      out.write("        <link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"css/font-awesome.min.css\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"css/pe-icon-7-stroke.css\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"css/owl.carousel.css\">\n");
      out.write("\t\t<link rel=\"stylesheet\" href=\"css/magnific-popup.css\">\n");
      out.write("\t\t<link rel=\"stylesheet\" href=\"css/meanmenu.css\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"style.css\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"css/responsive.css\">\n");
      out.write("        <script src=\"js/vendor/modernizr-2.8.3.min.js\"></script>\n");
      out.write("        <!-- 박상준 -->\n");
      out.write("    \t<link rel=\"stylesheet\" type=\"text/css\" href=\"css/styles.css\"/>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<div class=\"header-top-area black-bg hidden-xs\" style=\"min-height:41.14px\">\n");
      out.write("\t\t\t<div class=\"container\">\n");
      out.write("\t\t\t\t<div class=\"row\">\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("<div>\n");
      out.write("\n");
for(int i =0;i<list.size();i++){	
	Festival fst = list.get(i);
	
      out.write("\n");
      out.write("\t<script type=\"text/javascript\">\n");
      out.write("\t\tfst_name='");
      out.print(fst.getFes_name());
      out.write("'\n");
      out.write("\t</script>\n");
      out.write("\t<a href=\"\" onclick=\"fesClick('");
      out.print(fst.getFes_name());
      out.write("')\">\n");
      out.write("\t\t");
      out.print(fst.getFes_name());
      out.write("\n");
      out.write("\t</a><br>\n");
} 
      out.write("\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
